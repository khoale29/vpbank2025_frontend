{"version":3,"file":"static/js/805.33d8dd6c.chunk.js","mappings":"yKAAA,MAIaA,EAHJC,OAAOC,SAASC,OCEnBC,GDEsBH,OAAOC,SAASC,OCFhCE,EAAAA,EAAMC,OAAO,CACvBC,QAASP,EACTQ,QAAS,CACP,eAAgB,oBAElBC,QAAS,OAGXL,EAAIM,aAAaC,QAAQC,IACtBC,IACC,MAAMC,EAAQC,aAAaC,QAAQ,aAInC,OAHIF,IACFD,EAAOL,QAAQS,cAAa,UAAAC,OAAaJ,IAEpCD,GAERM,GACQC,QAAQC,OAAOF,IAI1Bf,EAAIM,aAAaY,SAASV,IACvBU,GAAaA,EACbH,IAAW,IAADI,EAIT,OAH+B,OAAb,QAAdA,EAAAJ,EAAMG,gBAAQ,IAAAC,OAAA,EAAdA,EAAgBC,SAClBT,aAAaU,WAAW,aAEnBL,QAAQC,OAAOF,KAInB,MAiKMO,EAAW,CACtBC,YAAaC,eAAOC,GAA+B,IAAtBC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACvC,IACE,MAAMT,QAAiBlB,EAAI8B,KAAK,kBAAmB,CACjDL,UACAM,WAAYL,IAGd,GAAIR,EAASc,KAAKC,QAChB,MAAO,CACLR,QAASP,EAASc,KAAKA,KAAKP,QAC5BC,UAAWR,EAASc,KAAKA,KAAKD,WAC9BG,UAAWhB,EAASc,KAAKA,KAAKE,UAC9BC,UAAWjB,EAASc,KAAKA,KAAKI,YAGhC,MAAM,IAAIC,MAAMnB,EAASc,KAAKjB,OAAS,kCAE3C,CAAE,MAAOA,GAAQ,IAADuB,EAAAC,EAEd,GADAC,QAAQzB,MAAM,mBAAoBA,GAChB,QAAlBuB,EAAIvB,EAAMG,gBAAQ,IAAAoB,GAAM,QAANC,EAAdD,EAAgBN,YAAI,IAAAO,GAApBA,EAAsBxB,MACxB,MAAM,IAAIsB,MAAMtB,EAAMG,SAASc,KAAKjB,OAEtC,MAAM,IAAIsB,MAAM,qDAClB,CACF,EAEAI,cAAejB,UACb,IACE,MAAMN,QAAiBlB,EAAI8B,KAAK,0BAEhC,GAAIZ,EAASc,KAAKC,QAChB,MAAO,CACLP,UAAWR,EAASc,KAAKA,KAAKD,WAC9BW,UAAWxB,EAASc,KAAKA,KAAKW,WAC9BlB,QAASP,EAASc,KAAKA,KAAKP,SAG9B,MAAM,IAAIY,MAAMnB,EAASc,KAAKjB,OAAS,2BAE3C,CAAE,MAAOA,GAAQ,IAAD6B,EAAAC,EAEd,GADAL,QAAQzB,MAAM,wBAAyBA,GACrB,QAAlB6B,EAAI7B,EAAMG,gBAAQ,IAAA0B,GAAM,QAANC,EAAdD,EAAgBZ,YAAI,IAAAa,GAApBA,EAAsB9B,MACxB,MAAM,IAAIsB,MAAMtB,EAAMG,SAASc,KAAKjB,OAEtC,MAAM,IAAIsB,MAAM,8CAClB,GAGFS,eAAgBtB,UACd,IACE,MAAMN,QAAiBlB,EAAI+C,IAAI,sBAADjC,OAAuBY,IAErD,GAAIR,EAASc,KAAKC,QAChB,OAAOf,EAASc,KAAKA,KAErB,MAAM,IAAIK,MAAMnB,EAASc,KAAKjB,OAAS,6BAE3C,CAAE,MAAOA,GAAQ,IAADiC,EAAAC,EAEd,GADAT,QAAQzB,MAAM,0BAA2BA,GACvB,QAAlBiC,EAAIjC,EAAMG,gBAAQ,IAAA8B,GAAM,QAANC,EAAdD,EAAgBhB,YAAI,IAAAiB,GAApBA,EAAsBlC,MACxB,MAAM,IAAIsB,MAAMtB,EAAMG,SAASc,KAAKjB,OAEtC,MAAM,IAAIsB,MAAM,6BAClB,GAGFa,mBAAoB1B,UAClB,IACE,MAAMN,QAAiBlB,EAAI+C,IAAI,uBAE/B,GAAI7B,EAASc,KAAKC,QAChB,OAAOf,EAASc,KAAKA,KAErB,MAAM,IAAIK,MAAMnB,EAASc,KAAKjB,OAAS,0BAE3C,CAAE,MAAOA,GAAQ,IAADoC,EAAAC,EAEd,GADAZ,QAAQzB,MAAM,uBAAwBA,GACpB,QAAlBoC,EAAIpC,EAAMG,gBAAQ,IAAAiC,GAAM,QAANC,EAAdD,EAAgBnB,YAAI,IAAAoB,GAApBA,EAAsBrC,MACxB,MAAM,IAAIsB,MAAMtB,EAAMG,SAASc,KAAKjB,OAEtC,MAAM,IAAIsB,MAAM,0BAClB,GAGFgB,gBAAiB7B,UACf,IACE,MAAMN,QAAiBlB,EAAI8B,KAAK,+BAEhC,GAAIZ,EAASc,KAAKC,QAChB,OAAOf,EAASc,KAAKA,KAErB,MAAM,IAAIK,MAAMnB,EAASc,KAAKjB,OAAS,6BAE3C,CAAE,MAAOA,GAAQ,IAADuC,EAAAC,EAEd,GADAf,QAAQzB,MAAM,0BAA2BA,GACvB,QAAlBuC,EAAIvC,EAAMG,gBAAQ,IAAAoC,GAAM,QAANC,EAAdD,EAAgBtB,YAAI,IAAAuB,GAApBA,EAAsBxC,MACxB,MAAM,IAAIsB,MAAMtB,EAAMG,SAASc,KAAKjB,OAEtC,MAAM,IAAIsB,MAAM,6BAClB,GAGFmB,YAAahC,UACX,IAEE,aADuBxB,EAAI+C,IAAI,sBACff,IAClB,CAAE,MAAOjB,GAEP,MADAyB,QAAQzB,MAAM,4BAA6BA,GACrC,IAAIsB,MAAM,+BAClB,GAGFoB,gBAAiBjC,UACf,IACE,MAAMN,QAAiBlB,EAAI+C,IAAI,4BAE/B,GAAI7B,EAASc,KAAKC,QAChB,OAAOf,EAASc,KAAKA,KAErB,MAAM,IAAIK,MAAMnB,EAASc,KAAKjB,OAAS,8BAE3C,CAAE,MAAOA,GAAQ,IAAD2C,EAAAC,EAEd,GADAnB,QAAQzB,MAAM,2BAA4BA,GACxB,QAAlB2C,EAAI3C,EAAMG,gBAAQ,IAAAwC,GAAM,QAANC,EAAdD,EAAgB1B,YAAI,IAAA2B,GAApBA,EAAsB5C,MACxB,MAAM,IAAIsB,MAAMtB,EAAMG,SAASc,KAAKjB,OAEtC,MAAM,IAAIsB,MAAM,8BAClB,GAGFuB,mBAAoBpC,UAClB,IACE,MAAMN,QAAiBlB,EAAI6D,IAAI,2BAA4B,CACzDC,OAAQA,IAGV,GAAI5C,EAASc,KAAKC,QAChB,OAAOf,EAASc,KAAKA,KAErB,MAAM,IAAIK,MAAMnB,EAASc,KAAKjB,OAAS,iCAE3C,CAAE,MAAOA,GAAQ,IAADgD,EAAAC,EAEd,GADAxB,QAAQzB,MAAM,8BAA+BA,GAC3B,QAAlBgD,EAAIhD,EAAMG,gBAAQ,IAAA6C,GAAM,QAANC,EAAdD,EAAgB/B,YAAI,IAAAgC,GAApBA,EAAsBjD,MACxB,MAAM,IAAIsB,MAAMtB,EAAMG,SAASc,KAAKjB,OAEtC,MAAM,IAAIsB,MAAM,iCAClB,G","sources":["config/api.js","services/api.js"],"sourcesContent":["const getBackendUrl = () => {\n  return window.location.origin;\n};\n \nexport const API_BASE_URL = getBackendUrl();\nexport const FRONTEND_URL = window.location.origin; ","import axios from 'axios';\nimport { API_BASE_URL } from '../config/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 30000,\n});\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('authToken');\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const chatAPI = {\n  sendMessage: async (message, conversationHistory = [], context = '') => {\n    try {\n      const response = await api.post('/api/chat/message', {\n        message,\n        conversationHistory: conversationHistory.slice(-10),\n        context,\n        timestamp: new Date().toISOString()\n      });\n      \n      if (response.data.success) {\n        return {\n          text: response.data.data.message,\n          timestamp: response.data.data.timestamp,\n          usage: response.data.data.usage\n        };\n      } else {\n        throw new Error(response.data.error || 'Failed to send message');\n      }\n    } catch (error) {\n      console.error('Chat API error:', error);\n      if (error.response?.data?.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Failed to send message. Please try again.');\n    }\n  },\n\n  generateLessonPlan: async (topic, level, duration) => {\n    try {\n      const response = await api.post('/api/chat/lesson-plan', {\n        topic,\n        level,\n        duration\n      });\n      \n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.error || 'Failed to generate lesson plan');\n      }\n    } catch (error) {\n      console.error('Lesson plan API error:', error);\n      if (error.response?.data?.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Failed to generate lesson plan. Please try again.');\n    }\n  },\n\n  checkHealth: async () => {\n    try {\n      const response = await api.get('/api/chat/health');\n      return response.data;\n    } catch (error) {\n      console.error('Chat health check error:', error);\n      throw new Error('Chat service is unavailable');\n    }\n  }\n};\n\nexport const knowledgeBaseAPI = {\n  uploadFiles: async (files, category = 'general', description = '') => {\n    try {\n      const formData = new FormData();\n      \n      Array.from(files).forEach(file => {\n        formData.append('files', file);\n      });\n      \n      formData.append('category', category);\n      formData.append('description', description);\n\n      const response = await api.post('/api/knowledge/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n        timeout: 60000,\n      });\n      \n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.error || 'Failed to upload files');\n      }\n    } catch (error) {\n      console.error('File upload error:', error);\n      if (error.response?.data?.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Failed to upload files. Please try again.');\n    }\n  },\n\n  getFiles: async () => {\n    try {\n      const response = await api.get('/api/knowledge/files');\n      \n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.error || 'Failed to fetch files');\n      }\n    } catch (error) {\n      console.error('Get files error:', error);\n      if (error.response?.data?.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Failed to fetch files');\n    }\n  },\n\n  deleteFile: async (fileId) => {\n    try {\n      const response = await api.delete(`/api/knowledge/files/${fileId}`);\n      \n      if (response.data.success) {\n        return response.data;\n      } else {\n        throw new Error(response.data.error || 'Failed to delete file');\n      }\n    } catch (error) {\n      console.error('Delete file error:', error);\n      if (error.response?.data?.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Failed to delete file');\n    }\n  },\n\n  searchFiles: async (query, category = '') => {\n    try {\n      const response = await api.get('/api/knowledge/search', {\n        params: { query, category }\n      });\n      \n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.error || 'Search failed');\n      }\n    } catch (error) {\n      console.error('Search files error:', error);\n      if (error.response?.data?.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Search failed');\n    }\n  },\n\n  checkHealth: async () => {\n    try {\n      const response = await api.get('/api/knowledge/health');\n      return response.data;\n    } catch (error) {\n      console.error('Knowledge base health check error:', error);\n      throw new Error('Knowledge base service is unavailable');\n    }\n  }\n};\n\nexport const agentAPI = {\n  sendMessage: async (message, sessionId = null) => {\n    try {\n      const response = await api.post('/api/agent/chat', {\n        message,\n        session_id: sessionId\n      });\n      \n      if (response.data.success) {\n        return {\n          message: response.data.data.message,\n          sessionId: response.data.data.session_id,\n          timestamp: response.data.data.timestamp,\n          traceInfo: response.data.data.trace_info\n        };\n      } else {\n        throw new Error(response.data.error || 'Failed to send message to agent');\n      }\n    } catch (error) {\n      console.error('Agent API error:', error);\n      if (error.response?.data?.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Failed to send message to agent. Please try again.');\n    }\n  },\n\n  createSession: async () => {\n    try {\n      const response = await api.post('/api/agent/session/new');\n      \n      if (response.data.success) {\n        return {\n          sessionId: response.data.data.session_id,\n          createdAt: response.data.data.created_at,\n          message: response.data.data.message\n        };\n      } else {\n        throw new Error(response.data.error || 'Failed to create session');\n      }\n    } catch (error) {\n      console.error('Create session error:', error);\n      if (error.response?.data?.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Failed to create session. Please try again.');\n    }\n  },\n\n  getSessionInfo: async (sessionId) => {\n    try {\n      const response = await api.get(`/api/agent/session/${sessionId}`);\n      \n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.error || 'Failed to get session info');\n      }\n    } catch (error) {\n      console.error('Get session info error:', error);\n      if (error.response?.data?.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Failed to get session info');\n    }\n  },\n\n  listActiveSessions: async () => {\n    try {\n      const response = await api.get('/api/agent/sessions');\n      \n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.error || 'Failed to list sessions');\n      }\n    } catch (error) {\n      console.error('List sessions error:', error);\n      if (error.response?.data?.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Failed to list sessions');\n    }\n  },\n\n  cleanupSessions: async () => {\n    try {\n      const response = await api.post('/api/agent/sessions/cleanup');\n      \n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.error || 'Failed to cleanup sessions');\n      }\n    } catch (error) {\n      console.error('Cleanup sessions error:', error);\n      if (error.response?.data?.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Failed to cleanup sessions');\n    }\n  },\n\n  checkHealth: async () => {\n    try {\n      const response = await api.get('/api/agent/health');\n      return response.data;\n    } catch (error) {\n      console.error('Agent health check error:', error);\n      throw new Error('Agent service is unavailable');\n    }\n  },\n\n  getSystemPrompt: async () => {\n    try {\n      const response = await api.get('/api/agent/system-prompt');\n      \n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.error || 'Failed to get system prompt');\n      }\n    } catch (error) {\n      console.error('Get system prompt error:', error);\n      if (error.response?.data?.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Failed to get system prompt');\n    }\n  },\n\n  updateSystemPrompt: async (prompt) => {\n    try {\n      const response = await api.put('/api/agent/system-prompt', {\n        prompt: prompt\n      });\n      \n      if (response.data.success) {\n        return response.data.data;\n      } else {\n        throw new Error(response.data.error || 'Failed to update system prompt');\n      }\n    } catch (error) {\n      console.error('Update system prompt error:', error);\n      if (error.response?.data?.error) {\n        throw new Error(error.response.data.error);\n      }\n      throw new Error('Failed to update system prompt');\n    }\n  }\n};\n\nexport const systemAPI = {\n  checkHealth: async () => {\n    try {\n      const response = await api.get('/api/health');\n      return response.data;\n    } catch (error) {\n      console.error('System health check error:', error);\n      throw new Error('Backend service is unavailable');\n    }\n  }\n};\n\nexport default api; "],"names":["API_BASE_URL","window","location","origin","api","axios","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","status","removeItem","agentAPI","sendMessage","async","message","sessionId","arguments","length","undefined","post","session_id","data","success","timestamp","traceInfo","trace_info","Error","_error$response8","_error$response8$data","console","createSession","createdAt","created_at","_error$response9","_error$response9$data","getSessionInfo","get","_error$response0","_error$response0$data","listActiveSessions","_error$response1","_error$response1$data","cleanupSessions","_error$response10","_error$response10$dat","checkHealth","getSystemPrompt","_error$response11","_error$response11$dat","updateSystemPrompt","put","prompt","_error$response12","_error$response12$dat"],"sourceRoot":""}