"use strict";(self.webpackChunkenglish_ai_agent_frontend=self.webpackChunkenglish_ai_agent_frontend||[]).push([[805],{805:(e,r,t)=>{t.d(r,{agentAPI:()=>n});var a=t(722);const o=window.location.origin,s=(window.location.origin,a.A.create({baseURL:o,headers:{"Content-Type":"application/json"},timeout:3e4}));s.interceptors.request.use(e=>{const r=localStorage.getItem("authToken");return r&&(e.headers.Authorization="Bearer ".concat(r)),e},e=>Promise.reject(e)),s.interceptors.response.use(e=>e,e=>{var r;return 401===(null===(r=e.response)||void 0===r?void 0:r.status)&&localStorage.removeItem("authToken"),Promise.reject(e)});const n={sendMessage:async function(e){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;try{const t=await s.post("/api/agent/chat",{message:e,session_id:r});if(t.data.success)return{message:t.data.data.message,sessionId:t.data.data.session_id,timestamp:t.data.data.timestamp,traceInfo:t.data.data.trace_info};throw new Error(t.data.error||"Failed to send message to agent")}catch(o){var t,a;if(console.error("Agent API error:",o),null!==(t=o.response)&&void 0!==t&&null!==(a=t.data)&&void 0!==a&&a.error)throw new Error(o.response.data.error);throw new Error("Failed to send message to agent. Please try again.")}},createSession:async()=>{try{const e=await s.post("/api/agent/session/new");if(e.data.success)return{sessionId:e.data.data.session_id,createdAt:e.data.data.created_at,message:e.data.data.message};throw new Error(e.data.error||"Failed to create session")}catch(t){var e,r;if(console.error("Create session error:",t),null!==(e=t.response)&&void 0!==e&&null!==(r=e.data)&&void 0!==r&&r.error)throw new Error(t.response.data.error);throw new Error("Failed to create session. Please try again.")}},getSessionInfo:async e=>{try{const r=await s.get("/api/agent/session/".concat(e));if(r.data.success)return r.data.data;throw new Error(r.data.error||"Failed to get session info")}catch(a){var r,t;if(console.error("Get session info error:",a),null!==(r=a.response)&&void 0!==r&&null!==(t=r.data)&&void 0!==t&&t.error)throw new Error(a.response.data.error);throw new Error("Failed to get session info")}},listActiveSessions:async()=>{try{const e=await s.get("/api/agent/sessions");if(e.data.success)return e.data.data;throw new Error(e.data.error||"Failed to list sessions")}catch(t){var e,r;if(console.error("List sessions error:",t),null!==(e=t.response)&&void 0!==e&&null!==(r=e.data)&&void 0!==r&&r.error)throw new Error(t.response.data.error);throw new Error("Failed to list sessions")}},cleanupSessions:async()=>{try{const e=await s.post("/api/agent/sessions/cleanup");if(e.data.success)return e.data.data;throw new Error(e.data.error||"Failed to cleanup sessions")}catch(t){var e,r;if(console.error("Cleanup sessions error:",t),null!==(e=t.response)&&void 0!==e&&null!==(r=e.data)&&void 0!==r&&r.error)throw new Error(t.response.data.error);throw new Error("Failed to cleanup sessions")}},checkHealth:async()=>{try{return(await s.get("/api/agent/health")).data}catch(e){throw console.error("Agent health check error:",e),new Error("Agent service is unavailable")}},getSystemPrompt:async()=>{try{const e=await s.get("/api/agent/system-prompt");if(e.data.success)return e.data.data;throw new Error(e.data.error||"Failed to get system prompt")}catch(t){var e,r;if(console.error("Get system prompt error:",t),null!==(e=t.response)&&void 0!==e&&null!==(r=e.data)&&void 0!==r&&r.error)throw new Error(t.response.data.error);throw new Error("Failed to get system prompt")}},updateSystemPrompt:async e=>{try{const r=await s.put("/api/agent/system-prompt",{prompt:e});if(r.data.success)return r.data.data;throw new Error(r.data.error||"Failed to update system prompt")}catch(a){var r,t;if(console.error("Update system prompt error:",a),null!==(r=a.response)&&void 0!==r&&null!==(t=r.data)&&void 0!==t&&t.error)throw new Error(a.response.data.error);throw new Error("Failed to update system prompt")}}}}}]);
//# sourceMappingURL=805.33d8dd6c.chunk.js.map